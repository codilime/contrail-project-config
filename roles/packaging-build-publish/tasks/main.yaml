- name: Populate ansible variables with packaging info
  prepare_packaging_vars:
    zuul_project: "{{ zuul.project }}"
    zuul_project_is_packaging: "{{ contrail_project_is_packaging }}"
    distribution: "{{ ansible_distribution|lower() }}"
    release: "{{ ansible_distribution_release }}"
  register: package

- name: Copy upstream repository into the workdir
  synchronize:
    src: "{{ ansible_env.HOME}}/{{ package.upstream.source_dir }}/"
    dest: "{{ ansible_env.HOME}}/{{ package.upstream.target_path }}/"
    rsync_opts:
      - --quiet
      - --exclude='.git/'
  when: package.upstream is defined
  delegate_to: "{{ ansible_default_ipv4.address }}"

- name: Create an orig tar.gz with upstream sources
  archive:
    path:
      - "{{ package.upstream.target_path }}"
    dest: "{{ package.package.name }}_{{ package.package.version.upstream }}.orig.tar.gz"

- name: Copy packaging from the packaging repo
  synchronize:
    src: "{{ ansible_env.HOME}}/{{ package.package.debian_dir }}/"
    dest: "{{ ansible_env.HOME}}/{{ package.upstream.target_path }}/debian/"
    rsync_opts:
      - --quiet
      - --exclude='.git/'
  when: package.upstream is defined
  delegate_to: "{{ ansible_default_ipv4.address }}"

- name: Add Ubuntu Cloud archive for the given OpenStack release
  shell: |
    docker exec --user root:root builder sh -c '
      apt-get update
      apt-get install --assume-yes ubuntu-cloud-keyring
      echo "deb http://ubuntu-cloud.archive.canonical.com/ubuntu xenial-updates/ocata main" \
        >> /etc/apt/sources.list'

- name: Install build-related packages in the container
  shell: |
    docker exec --user root:root builder sh -c '
      apt-get update
      apt-get install --no-install-recommends --assume-yes \
        devscripts equivs build-essential'

- name: Install package dependencies for the build
  shell: |
    docker exec --user root:root builder sh -c '
      cd /build/{{ package.upstream.target_path }}/
            mk-build-deps -i debian/control \
        --tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes"
      apt-get autoremove --assume-yes --purge'

- name: Create source and binary debian packages
  shell: |
    docker exec builder sh -c '
      cd /build/{{ package.upstream.target_path }}/
      debuild -us -uc'
